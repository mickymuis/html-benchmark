/*
 * Haut - a lightweight html tokenizer
 *
 * Micky Faas <micky@edukitty.org>
 * (C) 2017, Leiden University
 */

#ifndef STATE_MACHINE_H
#define STATE_MACHINE_H

#include <sys/types.h>
#include "string_util.h"

/* These functions query the state-transition tables that
 * were generated by fsm2array from FSM-notation.
 * It is important to notice that none of these functions
 * check if the parameters/inputs are within bounds.
 * Therefore, incorrect parameters lead to undefined behavior
 * and crashes without prior warning. 
 */

/* Given the current lexer state and character c [0,255], returns the next state 
 * Return value is one of L_... defined in state.h 
 */
int lexer_next_state( int lexer_state, char c );

/* Given the current and the next lexer state, return the next parser state/action
 * Return value is one of P_... defined in state.h 
 */
const char* parser_next_state( int lexer_state, int next_lexer_state );

/* Given a string @str, iterate the HTML5 tag-accepting-FSM @len times.
 * Return value is one of TAG_... defined in tag.h
 * Note that ALL characters in @str must be on the interval
 * [TAG__FIRST_CHAR, TAG__LAST_CHAR] 
 */
int decode_tag( const char* str, size_t len );

/* Given a string @str, iterate the HTML5 entity-accepting-FSM @len times.
 * Return value is the corresponding Unicode codepoint, or zero.
 * All characters in @str must be on the interval
 * [95, 122] 
 */
char32_t decode_entity( const char* str, size_t len );


#endif
